// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: lead.sql

package db

import (
	"context"
)

const createLead = `-- name: CreateLead :one
INSERT INTO leads (
    account_id,
    email,
    telephone_number,
    target_email,
    company_name,
    conversation
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, account_id, email, telephone_number, target_email, company_name, conversation, created_at
`

type CreateLeadParams struct {
	AccountID       int64  `json:"account_id"`
	Email           string `json:"email"`
	TelephoneNumber string `json:"telephone_number"`
	TargetEmail     string `json:"target_email"`
	CompanyName     string `json:"company_name"`
	Conversation    string `json:"conversation"`
}

func (q *Queries) CreateLead(ctx context.Context, arg CreateLeadParams) (Lead, error) {
	row := q.db.QueryRowContext(ctx, createLead,
		arg.AccountID,
		arg.Email,
		arg.TelephoneNumber,
		arg.TargetEmail,
		arg.CompanyName,
		arg.Conversation,
	)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Email,
		&i.TelephoneNumber,
		&i.TargetEmail,
		&i.CompanyName,
		&i.Conversation,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLead = `-- name: DeleteLead :exec
DELETE FROM leads
WHERE id = $1
`

func (q *Queries) DeleteLead(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLead, id)
	return err
}

const getLead = `-- name: GetLead :one
SELECT id, account_id, email, telephone_number, target_email, company_name, conversation, created_at FROM leads
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLead(ctx context.Context, id int64) (Lead, error) {
	row := q.db.QueryRowContext(ctx, getLead, id)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Email,
		&i.TelephoneNumber,
		&i.TargetEmail,
		&i.CompanyName,
		&i.Conversation,
		&i.CreatedAt,
	)
	return i, err
}

const listLeads = `-- name: ListLeads :many
SELECT id, account_id, email, telephone_number, target_email, company_name, conversation, created_at FROM leads
WHERE account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListLeadsParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListLeads(ctx context.Context, arg ListLeadsParams) ([]Lead, error) {
	rows, err := q.db.QueryContext(ctx, listLeads, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lead
	for rows.Next() {
		var i Lead
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Email,
			&i.TelephoneNumber,
			&i.TargetEmail,
			&i.CompanyName,
			&i.Conversation,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLead = `-- name: UpdateLead :one
UPDATE leads
SET email = $2, 
    telephone_number = $3,
    target_email = $4,
    company_name = $5,
    conversation = $6
WHERE id = $1
RETURNING id, account_id, email, telephone_number, target_email, company_name, conversation, created_at
`

type UpdateLeadParams struct {
	ID              int64  `json:"id"`
	Email           string `json:"email"`
	TelephoneNumber string `json:"telephone_number"`
	TargetEmail     string `json:"target_email"`
	CompanyName     string `json:"company_name"`
	Conversation    string `json:"conversation"`
}

func (q *Queries) UpdateLead(ctx context.Context, arg UpdateLeadParams) (Lead, error) {
	row := q.db.QueryRowContext(ctx, updateLead,
		arg.ID,
		arg.Email,
		arg.TelephoneNumber,
		arg.TargetEmail,
		arg.CompanyName,
		arg.Conversation,
	)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Email,
		&i.TelephoneNumber,
		&i.TargetEmail,
		&i.CompanyName,
		&i.Conversation,
		&i.CreatedAt,
	)
	return i, err
}
